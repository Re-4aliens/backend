name: FriendShip - Deploy to Amazon EC2

on:
  push:
    branches:
      - main

env:
  APP_NAME : friendship
  BUILD_NAME : friendship

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      test-mongo:
        image: mongo:latest
        ports:
          - 27018:27018
        options: --name test-mongo --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 설정 파일 추가
      - name: application-secret.yml 구성
        run: |
          cd ./src/main/resources
          touch ./application-secret.yml
          echo "${{ secrets.APPLICATION_SECRET }}" > ./application-secret.yml

      - name: firebase_service_key.json 구성
        run: |
          cd ./src/main/resources
          touch ./firebase_service_key.json
          echo "${{ secrets.FCM_KEY }}" > ./firebase_service_key.json

      - name: firebase_service_key.json 파일 생성
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase_service_key.json"
          json: ${{ secrets.FCM_KEY }}

      - name: JSON 파일 이동
        run: |
          mv ./firebase_service_key.json ./src/main/resources/firebase_service_key.json

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew
        
      - name : asciidoc 플러그인 실행 및 생성된 html 파일 정적 저장소로 이동
        run: |
          ./gradlew asciidoctor
          mkdir -p src/main/resources/static/docs
          cp -r build/docs/asciidoc/* src/main/resources/static/docs/

      - name: Gradle 빌드
        run: ./gradlew build -x test

      - name: 테스트 실행
        run: ./gradlew test
        env:
          MONGO_HOST: localhost
          MONGO_PORT: 27018  # 테스트용 MongoDB의 포트로 설정

      - name: Docker 이미지 파일 PUSH
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --platform linux/arm64/v8 -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

      - name: AWS 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }} # pem 키
          # 도커 작업
          script: |
            # 최신 friendship 이미지 pull
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
            
            # 기존 friendship 컨테이너 중지 및 삭제
            sudo docker stop friendship || true
            sudo docker rm friendship || true
            
            # 새 friendship 컨테이너 실행
            sudo docker run -d --log-driver=syslog -p 443:8080 --name friendship --network friendship-network -e spring.profiles.active=prod -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
            
            # friendship 관련 종료된 컨테이너 삭제
            sudo docker container prune -f
            
            # 사용하지 않는 friendship 이미지만 삭제 (최신 버전 제외)
            sudo docker image prune -f
            
            # 이전 버전의 friendship 이미지 삭제
            sudo docker images ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }} -q | awk 'NR>1' | xargs -r sudo docker rmi -f

      - name: 테스트용 MongoDB 컨테이너 종료 및 삭제
        run: |
          sudo docker stop test-mongo || true
          sudo docker rm test-mongo || true
