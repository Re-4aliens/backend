name: FriendShip - Deploy to Amazon EC2

on:
  push:
    branches:
      - main

env:
  APP_NAME : friendship
  BUILD_NAME : friendship

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 설정 파일 추가
      - name: application-secret.yml 구성
        run: |
          cd ./src/main/resources
          touch ./application-secret.yml
          echo "${{ secrets.APPLICATION_SECRET }}" > ./application-secret.yml

      - name: firebase_service_key.json 구성
        run: |
          cd ./src/main/resources
          touch ./firebase_service_key.json
          echo "${{ secrets.FCM_KEY }}" > ./firebase_service_key.json

      - name: firebase_service_key.json 파일 생성
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase_service_key.json"
          json: ${{ secrets.FCM_KEY }}

      - name: JSON 파일 이동
        run: |
          mv ./firebase_service_key.json ./src/main/resources/firebase_service_key.json

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name : asciidoc 플러그인 실행 및 생성된 html 파일 정적 저장소로 이동
        run: |
          ./gradlew asciidoctor
          mkdir -p src/main/resources/static/docs
          cp -r build/docs/asciidoc/* src/main/resources/static/docs/

      - name: Gradle 빌드
        run: ./gradlew build -x test

      - name: Docker 이미지 파일 PUSH
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build --platform linux/arm64/v8 -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

      - name: AWS 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }} # pem 키
          # 도커 작업
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
            sudo docker stop $(docker ps --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}" -q)
            sudo docker run -d --log-driver=syslog -p 443:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
            sudo docker rm $(docker ps --filter "status=exited" --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}" -q)
            sudo docker image prune -f
