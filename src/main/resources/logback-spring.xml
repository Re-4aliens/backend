<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--  콘솔 출력 폼 설정  -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="CONSOLE_LOG_CHARSET" value="${CONSOLE_LOG_CHARSET:-default}"/>

    <!-- Logback 내부 초기화 로그 억제 -->
    <logger name="ch.qos.logback" level="ERROR"/>
    <logger name="org.springframework.boot.logging.logback" level="ERROR"/>

    <!-- 특정 클래스나 패키지의 로그 레벨 설정 -->
    <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>
    <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>
    <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>
    <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
    <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>
    <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>
    <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>
    <logger name="org.springframework.boot.actuate.endpoint.jmx" level="WARN"/>

    <!-- 콘솔 로깅 -->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${CONSOLE_LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <property name="LOG_PATH" value="./logs"/>
    <property name="LOG_FILE_NAME" value="info"/>
    <property name="ERR_LOG_FILE_NAME" value="error"/>

    <!-- API 로깅 -->
    <appender name="ApiLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <!-- 로그 레벨 포함 -->
                <logLevel>
                    <fieldName>level</fieldName>
                </logLevel>

                <!-- MDC 포함 -->
                <mdc>
                </mdc>

                <!-- 타임스탬프 포함 -->
                <timestamp>
                    <pattern>yyyy-MM-dd'T'HH:mm:ss.SSSSSS</pattern>
                </timestamp>

                <!-- 메시지 포함 -->
                <message>
                    <fieldName>message</fieldName>
                </message>

                <!-- 예외 정보 포함 -->
                <stackTrace>
                    <fieldName>stacktrace</fieldName>
                </stackTrace>
            </providers>
        </encoder>

        <!-- 하루에 한번 압축 후 보관, 최대 30일, 1GB까지 보관 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 오류 로깅 -->
    <appender name="ErrorLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <!-- 로그 레벨 포함 -->
                <logLevel>
                    <fieldName>level</fieldName>
                </logLevel>

                <!-- MDC 포함 -->
                <mdc>
                </mdc>

                <!-- 타임스탬프 포함 -->
                <timestamp>
                    <pattern>yyyy-MM-dd'T'HH:mm:ss.SSSSSS</pattern>
                </timestamp>

                <!-- 로거 이름 포함 -->
                <loggerName>
                    <fieldName>logger</fieldName>
                </loggerName>

                <!-- 메시지 포함 -->
                <message>
                    <fieldName>message</fieldName>
                </message>

                <!-- 예외 정보 포함 -->
                <stackTrace>
                    <fieldName>stacktrace</fieldName>
                </stackTrace>
            </providers>
        </encoder>

        <!-- 하루에 한번 압축 후 보관, 최대 30일, 1GB까지 보관 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- Logstash 로깅 -->
    <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>logstash:50000</destination>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder" />
    </appender>

    <springProfile name="dev">
        <root level="${logging.level.root:-INFO}">
            <appender-ref ref="Console" />
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="${logging.level.root:-INFO}">
            <appender-ref ref="ApiLogFile" />
            <appender-ref ref="ErrorLogFile" />
            <appender-ref ref="LOGSTASH" />
        </root>
    </springProfile>
</configuration>
